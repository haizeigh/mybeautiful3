<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:content="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--开启注解扫描-->
    <content:component-scan base-package="com.company"/>
    <!--开启aop切面代理 提供注释方法-->
    <aop:aspectj-autoproxy/>

    <!-- 激活annotation功能 ?????-->
    <content:annotation-config></content:annotation-config>
    <content:spring-configured></content:spring-configured>

    <!-- spring mvc 开启注解-->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!--view 视图解析-->
    <!--<bean id="resolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
-->
    <!--配置多媒体文件上传解析器-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

    <!--配置根据后缀.xml  .json 返回对应的数据格式-->

    <!-- 开启注解驱动 -->
    <!-- 这样可以使用@Controller这些注解 -->
    <!--<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"></mvc:annotation-driven>-->

    <!--测试访问静态资源-->
    <mvc:default-servlet-handler />

    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
<!--       支持路径扩展（如userList.xml,userList.json）-->
        <property name="favorPathExtension" value="true"/>
<!--        支持参数扩展   默认的请求参数是format，可以通过parameterName属性指定一个自定义的参数-->
        <property name="favorParameter" value="false"/>
<!--        由于不同的浏览器产生的Accept头都是不一样的，所以一般不建议采用Accept确定MIME类型-->
        <property name="ignoreAcceptHeader" value="true"/>

<!--
JAF（JavaBeans Activation Framework）可提供由扩展名（或URL参数）到
        资源格式的自动映射机制（如json->"application/json"），这时classpath下必须有activation.jar包
        说白了，就是系统有一组配置好的下面的mediaTypes
        这里不使用JAF而是自行定义URL参数到资源格式的映射，这里只定义了JSON和XML-->
        <!--<property name="useJaf" value="false"/>-->
        <property name="defaultContentType" value="text/html"/>

        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json"/>
                <entry key="xml" value="application/xml"/>
            </map>
        </property>
    </bean>


    <bean id="contentNegotiatingViewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <!-- 设置内容协商管理器 -->
        <property name="contentNegotiationManager" ref="contentNegotiationManager"/>
        <property name="order" value="1"/>
        <!-- 设置视图解析器 -->
        <property name="viewResolvers">

            <list>
<!--                定义的viewResolvers，会被系统使用。也就是说系统通过上面的配置以及这里的配置，全部汇总后查找视图解析器-->
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
                <bean  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="prefix" value="/WEB-INF/"></property>
                    <property name="suffix" value=".jsp"></property>
                </bean>
            </list>
        </property>

        <property name="defaultViews" >
            <list>
                  <!--JSON视图 -->
                 <bean  class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" >
                        <!--这两个参数规定返回的json样式-->
                     <property name="extractValueFromSingleKeyModel" value="true"/>
                     <property name="prettyPrint" value="true"/>
                 </bean>
                 <!-- XML视图 -->
                 <bean  class="org.springframework.web.servlet.view.xml.MarshallingView">
                     <property name="marshaller">
                        <bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
                            <property name="classesToBeBound">
                                <list>
                                    <!--这里说明了哪些类会xml化-->
                                    <value>com.company.web.model.Response</value>
                                </list>
                            </property>
                        </bean>
                     </property>
                 </bean>

            </list>
        </property>
    </bean>



    <import resource="dubbo-customer.xml"/>
    <import resource="rabbit.xml"/>
    <!--<import resource="spring-shiro.xml"/>-->
    <import resource="spring-mybatis.xml"/>
    <import resource="tx.xml"/>
    <import resource="session.xml"/>
</beans>
