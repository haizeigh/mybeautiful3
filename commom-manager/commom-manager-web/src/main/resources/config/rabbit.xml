<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">
    <!--生产者——rabbitMq——消费者，rabbitMq直接安装到linux机器上-->
    <!--如果exchange和queue都是持久化的,那么它们之间的binding也是持久化的,如果exchange和queue两者之间有一个持久化，一个非持久化,则不允许建立绑定.-->

    <!--配置connection-factory，指定连接rabbit server参数 -->
    <!--自己配置的账户，以使用mq-->
    <rabbit:connection-factory id="connectionFactory1"  username="asdf" password="123456"  host="10.200.114.43" port="5672"/>

    <!--定义rabbit template用于数据的接收和发送 -->
    <!--通过amqpTemplate 向交换机 exchangeTest 发送消息，依次定义不同交换机-->
    <rabbit:template id="amqpTemplate2" connection-factory="connectionFactory1" exchange="exchangeTest2" />
    <!-- 消息对象json转换类 message-converter="jsonMessageConverter" -->
   <!-- <bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter" />-->

    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
    <rabbit:admin connection-factory="connectionFactory1"/>

    <!--定义queue -->
    <rabbit:queue name="queueTest2"  auto-delete="false" exclusive="false" durable="true"/>

    <!-- 定义direct exchange，绑定queueTest -->
    <!--Direct Exchange:直接匹配,通过Exchange名称+RountingKey来发送与接收消息.-->
    <!--Fanout Exchange:广播订阅,向所有的消费者发布消息,,忽略Routing Key.-->
    <!--Topic Exchange：主题匹配订阅,这里的主题指的是RoutingKey,RoutingKey可以采用通配符,如:*或#-->
    <rabbit:direct-exchange id="exchangeTest2"  name="exchangeTest2" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="queueTest2" key="queueTestKey2"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>
    <!--如果有两个接收程序都是用了同一个的queue和相同的routingKey去绑定direct exchange的话，分发的行为是负载均衡的，也就是说第一个是程序1收到，第二个是程序2收到，以此类推。-->
    <!--如果有两个接收程序用了各自的queue，但使用相同的routingKey去绑定direct exchange的话，分发的行为是复制的，也就是说每个程序都会收到这个消息的副本。行为相当于fanout类型的exchange。-->



</beans>
